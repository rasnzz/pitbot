import logging
import os
import sys
import sqlite3
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
import gspread
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
SPREADSHEET_URL = os.getenv('SPREADSHEET_URL')

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
WELCOME_IMAGE = "images/welcome.jpg"
COUPON_IMAGE = "images/coupon.jpg"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class UserManager:
    def __init__(self):
        self.setup_database()
    
    def setup_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            self.conn = sqlite3.connect('/root/pitbot/PIT/users.db')
            self.cursor = self.conn.cursor()
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    phone TEXT UNIQUE,
                    username TEXT,
                    first_name TEXT,
                    registered_at TIMESTAMP,
                    coupon_code TEXT
                )
            ''')
            self.conn.commit()
            logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def is_user_registered(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ"""
        try:
            self.cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
            return self.cursor.fetchone() is not None
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def register_user(self, user_data):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.cursor.execute('''
                INSERT INTO users (user_id, phone, username, first_name, registered_at, coupon_code)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                user_data['user_id'],
                user_data['phone'],
                user_data.get('username', ''),
                user_data.get('first_name', ''),
                datetime.now(),
                user_data.get('coupon', '')
            ))
            self.conn.commit()
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['user_id']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
            return True
        except sqlite3.IntegrityError:
            logging.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['user_id']} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return False
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def get_user_coupon(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.cursor.execute('SELECT coupon_code FROM users WHERE user_id = ?', (user_id,))
            result = self.cursor.fetchone()
            return result[0] if result else None
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞: {e}")
            return None
    
    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            self.cursor.execute('SELECT COUNT(*) FROM users')
            total_users = self.cursor.fetchone()[0]
            return total_users
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return 0

class GoogleSheetsManager:
    def __init__(self):
        self.client = None
        self.sheet = None
        self.is_connected = False
        self.setup_gsheets()
    
    def setup_gsheets(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            # –ü–†–ê–í–ò–õ–¨–ù–´–ï SCOPE
            scope = [
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive.file"
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists('credentials.json'):
                logging.error("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            creds = Credentials.from_service_account_file('credentials.json', scopes=scope)
            self.client = gspread.authorize(creds)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            spreadsheet_url = os.getenv('SPREADSHEET_URL')
            if not spreadsheet_url:
                logging.error("‚ùå SPREADSHEET_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
                return False
                
            self.sheet = self.client.open_by_url(spreadsheet_url).sheet1
            
            # –ü–†–û–í–ï–†–ö–ê –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶–´
            try:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                records = self.sheet.get_all_records()
                logging.info(f"‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω. –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(records)}")
                
            except IndexError:
                # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                logging.info("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏...")
                headers = ["–î–∞—Ç–∞", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "Username", "User ID", "–ö—É–ø–æ–Ω"]
                self.sheet.append_row(headers)
                logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
                records = []
                
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è (–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            if len(records) == 0:
                logging.info("üìù –¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ, –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
                    
            self.is_connected = True
            return True
            
        except gspread.exceptions.SpreadsheetNotFound:
            logging.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SPREADSHEET_URL")
        except gspread.exceptions.APIError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API: {e}")
            logging.error("–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            import traceback
            logging.error(traceback.format_exc())
        
        return False
    
    def add_lead(self, data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not self.is_connected:
            logging.error("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return False
            
        try:
            row = [
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                data.get('first_name', ''),
                data.get('last_name', ''),
                data.get('phone', ''),
                data.get('username', ''),
                data.get('user_id', ''),
                data.get('coupon', '')
            ]
            self.sheet.append_row(row)
            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É: {data['first_name']} - {data['phone']}")
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
user_manager = UserManager()
gsheets_manager = GoogleSheetsManager()

async def send_photo_with_caption(chat_id, context, image_path, caption, reply_markup=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º"""
    try:
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=caption,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            return True
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=caption,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
            logging.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
            return False
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text=caption,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
    if user_manager.is_user_registered(user.id):
        existing_coupon = user_manager.get_user_coupon(user.id)
        await update.message.reply_text(
            f"üëã –°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
            f"üé´ <b>–í–∞—à –∫—É–ø–æ–Ω:</b> <code>{existing_coupon}</code>\n\n"
            f"–û–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ = –æ–¥–∏–Ω –∫—É–ø–æ–Ω üé´\n"
            f"–ï—Å–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –∫—É–ø–æ–Ω, –≤–æ—Ç –æ–Ω üëÜ",
            parse_mode="HTML"
        )
        return

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])
    
    caption = (
        "üõ†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>P.I.T Store –û—Ä–µ–Ω–±—É—Ä–≥</b>!\n\n"
        "üéÅ <b>–ü–æ–ª—É—á–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫—É–ø–æ–Ω –Ω–∞ —á—Ç–æ —Ç–æ</b>\n\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
        "1Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n"
        "2Ô∏è‚É£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—É–ø–æ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!"
    )
    
    await send_photo_with_caption(
        update.effective_chat.id,
        context,
        WELCOME_IMAGE,
        caption,
        keyboard
    )

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
    if user_manager.is_user_registered(user.id):
        existing_coupon = user_manager.get_user_coupon(user.id)
        await query.edit_message_caption(
            caption=f"‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –∞–∫—Ü–∏–∏!\n\n–í–∞—à –∫—É–ø–æ–Ω: <b>{existing_coupon}</b>",
            parse_mode="HTML"
        )
        return
    
    try:
        user_channel_status = await context.bot.get_chat_member(
            chat_id=CHANNEL_USERNAME,
            user_id=user.id
        )
        
        if user_channel_status.status in ["member", "administrator", "creator"]:
            keyboard = ReplyKeyboardMarkup(
                [[KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            
            await query.edit_message_caption(
                caption="‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!</b>\n\n–¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá"
            )
            
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=keyboard
            )
        else:
            await query.edit_message_caption(
                caption="‚ùå <b>–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞."
            )
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await query.edit_message_caption(
            caption="‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = update.message.contact
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
    if user_manager.is_user_registered(user.id):
        existing_coupon = user_manager.get_user_coupon(user.id)
        await update.message.reply_text(
            f"‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –∞–∫—Ü–∏–∏!\n\n"
            f"–í–∞—à –∫—É–ø–æ–Ω: <b>{existing_coupon}</b>\n\n"
            f"–û–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ = –æ–¥–∏–Ω –∫—É–ø–æ–Ω üé´",
            parse_mode="HTML"
        )
        return
    
    if contact.user_id == user.id:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_number = contact.phone_number
        if not phone_number.startswith('+'):
            phone_number = f"+{phone_number}"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É–ø–æ–Ω–∞
        coupon_code = f"PIT-{user.id % 10000:04d}-15"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        user_data = {
            'user_id': user.id,
            'first_name': contact.first_name,
            'last_name': contact.last_name or '',
            'phone': phone_number,
            'username': user.username or '',
            'coupon': coupon_code
        }
        
        local_registration = user_manager.register_user(user_data)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
        sheets_success = gsheets_manager.add_lead(user_data)
        
        if local_registration:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É–ø–æ–Ω–æ–º
            caption = (
                "üéâ <b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b>\n\n"
                f"üè∑Ô∏è <b>–í–∞—à –∫—É–ø–æ–Ω –Ω–∞ —á–µ—Ç:</b> <code>{coupon_code}</code>\n\n"
                "üéÅ <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:</b>\n"
                "‚Ä¢ —á–µ—Ç —Ç—É—Ç –±—É–¥–µ—Ç\n"
                "‚Ä¢ –∏ —Ç—É—Ç –º–æ–∂–µ—Ç\n"
                "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n\n"
                "üè™ <b>–ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:</b>\n"
                "–≥. –û—Ä–µ–Ω–±—É—Ä–≥, —É–ª. –ú–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤ 37/3\n\n"
                "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:</b> +7 (495) 123-45-67\n\n"
                "<i>–ö—É–ø–æ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –¥–Ω–µ–π</i>"
            )
            
            await send_photo_with_caption(
                update.effective_chat.id,
                context,
                COUPON_IMAGE,
                caption
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_message = (
                "üì± <b>–ù–æ–≤—ã–π –ª–∏–¥!</b>\n"
                f"üë§ –ò–º—è: {contact.first_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
                f"üîó Username: @{user.username}\n" if user.username else "üîó Username: –ù–µ —É–∫–∞–∑–∞–Ω\n"
                f"üÜî User ID: {user.id}\n"
                f"üè∑Ô∏è –ö—É–ø–æ–Ω: {coupon_code}\n"
                f"üíæ –í —Ç–∞–±–ª–∏—Ü—É: {'‚úÖ' if sheets_success else '‚ùå'}\n"
                f"üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {user_manager.get_stats()}"
            )
            
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=admin_message,
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    total_users = user_manager.get_stats()
    sheets_status = "‚úÖ" if gsheets_manager.is_connected else "‚ùå"
    
    await update.message.reply_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ P.I.T Tools:</b>\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{total_users}</b>\n"
        f"‚Ä¢ Google Sheets: {sheets_status}\n"
        f"‚Ä¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: ‚úÖ\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>",
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message.text and update.message.text != "/start":
        await update.message.reply_text(
            "ü§ñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = ['BOT_TOKEN', 'CHANNEL_USERNAME', 'ADMIN_CHAT_ID', 'SPREADSHEET_URL']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CallbackQueryHandler(check_subscription, pattern="check_subscription"))
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
